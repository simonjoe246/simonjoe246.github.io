<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>移动应用的终点即将到来</title>
    <url>/%E7%BF%BB%E8%AF%91/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%9A%84%E7%BB%88%E7%82%B9%E5%8D%B3%E5%B0%86%E5%88%B0%E6%9D%A5/</url>
    <content><![CDATA[<p>几天前，看到一篇文章 <a href="https://medium.com/s/story/mobile-apps-will-disappear-soon-4b4e54f46eb8">“The end is near for mobile apps”</a>（需翻墙），大意是：</p>
<p>移动应用式微， 小程序即将兴起。</p>
<p>我觉得写的很好，有一定指导意义。</p>
<span id="more"></span>

<h2 id="移动应用的终点即将到来"><a href="#移动应用的终点即将到来" class="headerlink" title="移动应用的终点即将到来"></a>移动应用的终点即将到来</h2><p>作者：Lance Ng</p>
<p>译者：simonyan</p>
<p>原文网址：<a href="https://medium.com/s/story/mobile-apps-will-disappear-soon-4b4e54f46eb8">https://medium.com/s/story/mobile-apps-will-disappear-soon-4b4e54f46eb8</a></p>
<p>在接下来的三到七年内，我觉得大部分移动应用都会消失，并且可以预见：那些已经涌入移动创业板块的投资公司即将遭受数十亿美元的损失。除了一堆复杂的代码，什么都剩不下。</p>
<h3 id="有一天，所有的法律实体都会拥有自己的移动应用。"><a href="#有一天，所有的法律实体都会拥有自己的移动应用。" class="headerlink" title="有一天，所有的法律实体都会拥有自己的移动应用。"></a>有一天，所有的法律实体都会拥有自己的移动应用。</h3><p>这是我六年前的看法，那时，我正考虑投资一家创业公司。他们提供这样一种服务：无需写代码即可创建自己的移动应用 （这一点类似于提供网站建设服务的 <a href="https://www.wix.com/">Wix</a> 公司，不同的只是，前者提供的是移动应用创建服务）。用户只需要输入一些基本信息就能得到一个属于自己的应用，这些应用运行在公司提供的服务器上面，你可以下载到你的手机，并且可以通过二维码分享给其他人下载使用，这为个人社交以及初创的公司市场推广提供了极大便利。</p>
<p>有一天，所有的法律实体（包括人和公司）都会拥有自己的移动应用。这些应用将遍布互联网，就像地图上的不同建筑点一样。<strong>不幸的是，这并没有成为现实，</strong>我认为以下几点是影响 app 使用的直接原因：</p>
<ul>
<li><p>我们只会在自己的手机上装大概 50 到 100 个应用</p>
<p> 如果你不相信我的话，数一下你的手机上面有多少个应用。即使算上那些你删不掉的手机厂商的预装应用，最多也就 100 个。而在这些应用里，你经常使用的不超过 30 个。太多的应用会拖慢你的手机，它们占用内存空间，有很多后台运行，而且即使当你没有使用它们的时候，也会经常检查你的通知。</p>
<p> 无论如何，你真的愿意为你的朋友，你喜欢的饭店、便利店或者洗衣房而安装上百个应用吗？</p>
</li>
<li><p>应用应当满足常用的、功能性的目的而不是单纯地提供信息</p>
<p> 当智能手机刚出现的时候，大型的公司都一蜂窝地跑去做自己的应用了，然后他们发现，维护是个大问题。每次在网站上更新信息或退出一个新产品，都必须在应用上再做一遍。而且，每次用户的手机厂商更新操作系统后，你都必须调试你的应用以确保正确运行。除此之外，对于不同的品牌、系列以及不同屏幕尺寸，庞大的调试工作更加令人头痛。如果你是曾经做过软件开发的话，你应该懂我在说什么。</p>
<p> 事实是，除非你是大型的零售商或者内容提供商，需要经常帮助用户进行交易或者推送，不然你需要的只是一个对移动设备友好的网站而已。此外，如果你提供的信息是大家都想要的，人们为什么不在浏览器中谷歌呢。</p>
<blockquote>
<p>　你真的会在你的笔记本或者 PC 上安装这么多不同的软件吗？</p>
</blockquote>
</li>
<li><p>一些应用将成为社交媒体或者移动钱包生态的一部分</p>
<p> 这一点是基于以上两点的推理，并且在某些地区已经发生了，也就是业界称之为构建生态系统的东西，这一模式将用户日常行为以及消费与移动应用紧紧绑在了一起。</p>
</li>
</ul>
<p>一个典型场景是：在印度尼西亚，餐厅和咖啡厅不再像以前一样由店主控制维护点单以及配送，这些都被集成到了外卖应用中。再然后，这个外卖应用也被集成到移动钱包应用或者某种行程分享应用中，比如 Go-Jek，国内最大的电动车共享出行应用，给用户带来了很大的方便。对许多人来说，这就是能够提供共享出行、外卖以及其他生活服务的移动电子钱包。</p>
<p>   <img src="/images/2018-12-3-1.png"></p>
<p>   <img src="/images/2018-12-3-2.png"></p>
<p>   Go-Jek 的灵感来自于中国的微信，它是中国最大的即时通信应用，集成了我们能够想象的很多生活服务。每个中国公司都有一个微信公众号，用户可以接收推送以及进行动态交互、交易等。微信还有一个称之为“小程序”的东西，它是一个基于 API 的应用生态系统，第三方开发者可以基于此创建微信子应用。用户不必离开微信即可使用这个小程序，只要有一个微信账号便可在社交和支付功能间无缝切换。</p>
<p>当微信从一个只拥有即时通信功能变成了一个集成多种服务的超级应用时，中国的其他公司也开始在这个方向上发力：电子商务公司阿里巴巴的支付宝和搜索引擎公司百度。西方在超级应用上已经落后了，究竟哪个应用可以成为这种超级应用仍然需要时间来给予答案。</p>
<h3 id="即使是成功的应用也一样要被集成"><a href="#即使是成功的应用也一样要被集成" class="headerlink" title="即使是成功的应用也一样要被集成"></a>即使是成功的应用也一样要被集成</h3><p>任何成熟的行业都会发生整合，在互联网移动应用行业尤其如此。一个应用要变现需要大量的资金，相当的用户数量及流量。无论一个应用的创意有多么好，在它能达到收支平衡的状态之前都需要无数的广告以及市场推广，更不要说大到能够变现了。</p>
<p>软件第一次被称为“应用”是苹果为了和微软 Windows 系统上的“程序”相区分而提出的，你真的愿意在你的电脑或手机上安装这么多不同的软件吗？</p>
<p>当你在设备上安装任何东西时，请优先考虑基于云的服务和通过浏览器的软件即服务模型，而不是安装软件。</p>
<p>维护一个移动应用，尤其是像 IOS 或 Android 这样经常更新的软件，需要投入大量的时间、财力、人力。你是否遇见过更新完系统之后某些软件出现崩溃的现象吗。移动应用不再像以前那样必不可少了，集成即将到来，而“嗨，你知道有一个能xxx的软件吗”的时代也将随之结束。</p>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>每天都做一点</title>
    <url>/%E6%9D%82%E8%AE%B0/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%81%9A%E4%B8%80%E7%82%B9/</url>
    <content><![CDATA[<p>我是怎么在七天的空闲时间里掌握 vim 的？</p>
<span id="more"></span>

<h1 id="如何学习一项技术"><a href="#如何学习一项技术" class="headerlink" title="如何学习一项技术"></a>如何学习一项技术</h1><p>对于开发人员来说，要学习的知识太多了。大到网络协议、数据库、测试技术，小到每一门语言的语法、一个框架，甚至是一个第三方库的学习，都不是看一天就能学会的。需要我们有计划、不间断地学习。</p>
<p>为什么需要不间断？</p>
<p>一门技术是连贯的，一环扣着一环，前后知识联系紧密。如果一周学一天，或者想起来看两眼，最后即使完整看完了也是支离破碎的状态，也很难达到掌握的地步。只有让今天学的知识与昨天的形成联系，不断深入，最后才能对这项技术有一个完整的理解和把握。</p>
<p>所以呢，每天都看一点。</p>
<p>把一门知识或一项技术拆分，确定好每天的任务量，什么时间能完成也就能够把握了。这个每天的任务量不能太重，一定是自己确定能够完成，不然前期进展缓慢的话很容易就放弃了。很多时候放弃都是在前期，一旦我们对一件事到了掌握了一定程度的时候，想放弃都难。</p>
<p>这里面有几点需要注意：</p>
<ul>
<li><p>我说的每天意思是连贯、有规划，也不一定每天都安排，视知识的总量、难易程度以及你每天的时间而定。可以每周安排三天，一三五、二四六都可以。比如《数据库结构与算法》（我看的是极客时间的《数据结构与算法之美》，很不错，这是<a href="#GeekBang">课程链接</a>）,这门课我就不可能每天学一节，做笔记理解消化再加上编写代码，一晚上都不一定够，所以我安排的是一三五。</p>
</li>
<li><p>最好每次都把上次的知识回顾一下，每次的任务量小，所以复习起来没有那么困难，尤其是在做了笔记的情况下。这样，学习效率应该有很大提升。</p>
</li>
<li><p>中间不要放弃，哪怕是有事耽搁一两天，往后顺延就是了，别放弃。</p>
</li>
<li><p>可以借助工具，设置好间隔，到时间就提醒自己。我用的是巨硬公司的 <a href="todo.microsoft.com">Microsoft-Todo app</a>，很不错，上手前务必阅读使用帮助，有一点点难度。</p>
</li>
</ul>
<h1 id="我用七天学会了-vim"><a href="#我用七天学会了-vim" class="headerlink" title="我用七天学会了 vim"></a>我用七天学会了 vim</h1><p>我为什么要写这篇文章？</p>
<p>原因是我的时间管理能力极差，但是这个拆分方法是我在学习过程中自己摸索出来的。</p>
<p>然后，我用五天学会了 vim，自认为学得还不错。</p>
<p>什么是 vim?</p>
<p>vim 是人类史上最好的文本编辑器，本人无意引起 vim vs emacs 大战，但这句话可是我最佩服的<a href="https://coolshelll.cn/">耗子叔</a>说的，我很赞同。vim 可以让你完全摆脱鼠标和小键盘，高效，炫酷，但是很难学。我记得我第一次接触 vim 是在我学习 Git 的时候，当时使用 <code>commit</code> 命令忘记加 <code>-m</code> 参数，瞬间出现一个陌生界面，最操蛋的是，怎么退都退不出去，后来只能结束窗口会话才算是摆脱了它。再后来我又遇到了第二次、第三次，那时我已经通过 Google 查到了怎么退出，也大概了解了什么是 vim，但难度较高，而且开始用 <code>hjkl</code> 使用起来十分不适应，尝试学习几次之后只能作罢。</p>
<p>直到我在 github 上遇到了 <a href="https://github.com/dofy/learn-vim">learn-vim</a>(by dofy)项目。</p>
<p>这是一个包含基础、进阶部分的 vim 实操教程，分为七小节，七个 markdown 文件。需要你用 vim 打开文件，作者通过 markdown 文本的形式在讲解 vim 操作的同时会在文中让对文本进行实操，高效、明了，真是怎么赞美都不为过。</p>
<p>总之，推荐学习。</p>
<p>而我呢，就是每天学习一节，每天都会复习上一节学习的内容，就这样，七天基本掌握并且爱上了 vim。</p>
<p>并且，有一天无意中查到了一个 vim 的 chrome 插件，从此浏览网页我就再也用不到鼠标了。（你能想象这种感觉吗，虽然以前我也可以通过 chrome 的官方快捷键勉强做到，但体验和 vim 相比，就是一个天上一个地下了。）</p>
<p>vim 大法好！</p>
<h1 id="不只是编程"><a href="#不只是编程" class="headerlink" title="不只是编程"></a>不只是编程</h1><p>除了编程，这个方法当然也适用于学习其他东西。</p>
<p>比如英语。</p>
<p>说实话，考研之后，也没有英语考试的需要了，我的英语水平大概只处在原地踏步的水平。如果真的没有下降的话，那也是归因于看了不少美剧，开始尝试看一些英文技术文章。但这样还远远不够，第一，听力不行，无字幕看美剧我是根本做不到的。第二，阅读也不行，简单的技术文档没问题，但是那些英文博主列出的最简单的英语阅读入门书籍我看着都有些吃力。先把这两项解决了，口语什么的只能日后再说了。</p>
<p>所以我想了想，还是决定通过美剧入手。</p>
<ul>
<li><p>《生活大爆炸》即使不考虑专业词汇，语速对我来说也是过快的。这两天开始看《老友记》，不看字幕听了一下，还不错，就是它了。</p>
</li>
<li><p>拆分任务，目前是这样打算的，两天一集，第一天先看纯英文字幕的，第二天看无字幕的，直到能完全听懂为止。</p>
</li>
</ul>
<p>还有，目前数据库学习正在进行中，看的是廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/001508284671805d39d23243d884b8b99f440bfae87b0f4000">博客教程</a>。每天两小节，预计半个月学完。</p>
<p>至于其他的，我觉得以我目前的时间分配来说，完成每天的工作基础上，英语和数据库能按计划进行就很不错了，至少等学完数据库再说吧。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>极客时间《数据结构与算法之美》课程链接，扫描二维码即可。</p>
<p><span id="GeekBang"><img src="/images/GeekBangAlgorithm.jpg"></span></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>方便快捷体验Linux——WSL系统安装教程</title>
    <url>/uncategorized/%E6%96%B9%E4%BE%BF%E5%BF%AB%E6%8D%B7%E4%BD%93%E9%AA%8CLinux-WSL%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>不用安装双系统，不用虚拟机，Windows 上你就可以体验 Linux 的魅力。</p>
<span id="more"></span>

<h1 id="什么是-Linux"><a href="#什么是-Linux" class="headerlink" title="什么是 Linux"></a>什么是 Linux</h1><p>世界上有三大主流操作系统：Windows、Linux、Mac。</p>
<p>Windows：使用人数最多，占领了 80% 的个人计算机市场，真正的家用级操作系统。</p>
<p>Linux：小众的开源操作系统，服务器领域的王者，程序员手中的利器。</p>
<p>Mac OS：由伟大的乔布斯创立的苹果公司的操作系统，13% 的市场占有率。集优秀的 UI 设计、高质量的软件生态、程序员友好的命令行环境，独领风骚。</p>
<p>我们看电影经常看到黑客操作电脑（在程序员界，黑客是用来形容专家级程序员，并非外界认为的入侵者），随便几行命令就轻松黑进了别人的计算机，一般就是在 Linux 系统上操作的。</p>
<p>我们平常说的 Linux，其实说的是 Linux 发行版，是基于 Linux 内核而扩充了许多其他软件的系统包，如桌面环境、Shell 等，最著名的 Linux 发行版就是 Ubuntu。</p>
<p>对了，Linux 内核由当今最伟大的教父级程序员、黑客 Linus 开发而成。</p>
<p>对于一个程序员来说，除非你是专门开发 Windows 软件，你就应该了解一下 Linux，说不定你会爱上它的。</p>
<h1 id="什么是-WSL"><a href="#什么是-WSL" class="headerlink" title="什么是 WSL"></a>什么是 WSL</h1><p>WSL (Windows Subsystem for Linux) 是一个由微软开发的 Linux 兼容的内核接口，开启这个功能后，你就可以直接在 Windows 上安装使用一个 Linux 子系统了，就像使用一个软件那样。</p>
<p>一般我们买的电脑都是预装 Windows，这种情况下怎么用 Linux 呢？</p>
<ol>
<li>安装双系统或覆盖 Windows 安装 Linux。</li>
<li>Windows 上使用虚拟机软件安装 Linux。</li>
<li>购买 Linux 远程服务器，通过远程连接软件使用 Linux。</li>
</ol>
<p>第一种安装麻烦，尤其是双系统安装，麻烦到让人望而却步；第二种运行稍有卡顿；第三种操作也比较复杂，尤其是还要花钱。</p>
<p>所以本文的 WSL 是一种折中选择，操作简单、方便快捷，对于正在上操作系统课以及所有打算学习 Linux 的学生来说，十分合适。</p>
<h1 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h1><p><strong>前提</strong>：Windows 10 操作系统</p>
<p>首先找到：控制面板-程序-程序和功能</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550994477.8761458.png"></p>
<p>点击：启用或关闭 Windows 功能，然后拉到最下方，找到“适用于 Linux 的 Windows 子系统” 一项，并在前面打勾，即开启了 WSL 功能</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550994570.0735078.png"></p>
<p>这时系统会提示重启，点击确定。重启之后从开始菜单的磁贴中打开 Microsoft Store，也就是微软应用商店。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550995156.6728134.png"></p>
<p>在搜索框输入“Linux”，搜索结果出现了 WSL 的介绍，点击 “获取这些应用” 。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550995547.6749108.png"></p>
<p>选择 Ubuntu（也可以选择其他的，不过 Ubuntu 对新手比较友好），然后点击获取应用，选择分区安装。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550995806.1434197.png"></p>
<p>等待一会，就可以在开始菜单里找到 Ubuntu 启动器了。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550996016.0974934.png"></p>
<p>打开之后就是一个会话，可以在上面输入合法的命令，比如查看目录文件 ‘ls’，显示当前路径 ‘pwd’，切换到某个路径 ‘cd test’。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201902/1550996705.4909213.png"></p>
<p>注意：这个 WSL 系统是可以访问 Windows 系统下的磁盘文件的（如上图访问了我的 G 盘），以后我们就可以在WIndows 上进行 C 和 Java 开发了，体验完全不同。</p>
<p>其他的一些 Linux 指令和知识大家可以到网上搜索”鸟哥的 Linux 私房菜“，他的网站上提供了详尽的 Linux 教程，由浅入深，十分推荐。</p>
<p>其实这个默认的终端启动器的体验无论从美观还是使用上来说都与原生系统差了一些，终端有的话个不错的替代工具——Hypter，Linux 优化配置的方案可以自行搜索解决，推荐 zsh + oh-my-zsh 组合。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Allan方差分析法分析静态噪声的原理及实例代码</title>
    <url>/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/Allan%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90%E6%B3%95%E5%88%86%E6%9E%90%E9%9D%99%E6%80%81%E5%99%AA%E5%A3%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>本文给出了 Allan 方差的计算方法，应用于噪声分析的原理、步骤，并在结尾附上了计算函数的代码和应用实例。</p>
<span id="more"></span>

<h1 id="Allan-方差"><a href="#Allan-方差" class="headerlink" title="Allan 方差"></a>Allan 方差</h1><blockquote>
<p>Allan方差分析法分析惯性仪器（本文以陀螺仪为例）静态噪声的原理：将不同噪声的功率谱密度函数转换为 Allan 方差表达式，分析它们噪声在 Allan 方差曲线上的特定斜率，并在陀螺仪测量数据计算出的 Allan 方差曲线上进行匹配，再根据特征点求解每种噪声成分的系数。</p>
</blockquote>
<p>Allan 方差 (Allan Variance, AVAR)，中文一般称为<a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">阿仑方差</a></p>
<p>Allan 方差一般能识别以下五种噪声：</p>
<ul>
<li>量化噪声</li>
<li>角度随机游走噪声</li>
<li>零偏不稳定性</li>
<li>角速率随机游走噪声</li>
<li>速率斜坡</li>
</ul>
<h1 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h1><ol>
<li><p>采集陀螺仪静态噪声</p>
</li>
<li><p>根据噪声信号计算并画出出 Allan 方差曲线</p>
</li>
<li><p>在 Allan 方差曲线匹配每种噪声的特征斜率，根据函数与图像关系找到特征点，求出每种噪声的功率谱密度函数种的系数</p>
</li>
</ol>
<h1 id="五种噪声分析"><a href="#五种噪声分析" class="headerlink" title="五种噪声分析"></a>五种噪声分析</h1><p>功率谱密度函数与 Allan 方差之间的关系：</p>
<p>$$<br>\sigma _ {y} ^ 2 (\tau) &#x3D; 4 \int_{0}^{\infty} S _ {y}(f) \frac{\sin^4(\pi f \tau)} {(\pi f \tau)^2} df<br>$$</p>
<p>将噪声的功率谱密度函数代入上式，即可得到噪声的 Allan 方差表达式，最后取双对数分析。</p>
<table>
<thead>
<tr>
<th>噪声类型</th>
<th align="center">功率谱密度</th>
<th>Allan 方差</th>
<th align="center">特征斜率</th>
<th>特征点</th>
</tr>
</thead>
<tbody><tr>
<td>量化噪声(QN)</td>
<td align="center">$S_ {\Delta}(f) &#x3D; \tau_{\tiny0}Q^2$</td>
<td>$\log_{10}\sigma_{\tiny{QN}}(\tau)&#x3D;\log_{10}\sqrt{3}Q-\log_{10}\tau$</td>
<td align="center">-1</td>
<td>$(1,\sqrt{3}Q)$</td>
</tr>
<tr>
<td>角度随机游走(ARW)</td>
<td align="center">$S_{\varOmega}(f) &#x3D; N^2$</td>
<td>$\log_{10} \sigma_{\tiny{ARW}}(\tau) &#x3D; \log_{10}N - \frac{1}{2}\log_{10}\tau$</td>
<td align="center">$-\frac{1}{2}$</td>
<td>$(1,N)$</td>
</tr>
<tr>
<td>零偏不稳定性噪声(BI)</td>
<td align="center">$S_{\varOmega}(f) &#x3D; \frac{B^2}{2 {\pi} f}$</td>
<td>$\log_{10} \sigma_{\tiny{ARW}}(\tau) &#x3D; \log_{10}\frac{2B}{3}$</td>
<td align="center">0</td>
<td>$(1,\frac{2B}{3})$</td>
</tr>
<tr>
<td>角速率随机游走（RRW）</td>
<td align="center">$S_{\varOmega}(f) &#x3D; \frac{K^2}{(2 {\pi} f)^2}$</td>
<td>$\log_{10} \sigma_{\tiny{ARW}}(\tau) &#x3D; \frac{1}{2}\log_{10}\frac{K}{\sqrt{3}}$</td>
<td align="center">$\frac{1}{2}$</td>
<td>$(1,\frac{K}{\sqrt{3}})$</td>
</tr>
<tr>
<td>速率斜坡(RR)</td>
<td align="center">-</td>
<td>$\log_{10} \sigma_{\tiny{ARW}}(\tau) &#x3D; \log_{10}\frac{R\tau}{\sqrt{2}}$</td>
<td align="center">1</td>
<td>$(1,\frac{R}{\sqrt{2}})$</td>
</tr>
</tbody></table>
<p>注：对于速率斜坡噪声，一般假设角速率 $\Omega$ 与测试时间 t 之间呈线性关系$\varOmega(t) &#x3D; \varOmega(0) + Rt$，Allan 方差可直接计算</p>
<h1 id="Allan-方差计算过程"><a href="#Allan-方差计算过程" class="headerlink" title="Allan 方差计算过程"></a>Allan 方差计算过程</h1><p>输入：角速率序列，取样时间为 $\tau_{0}$</p>
<p>输出：不同相关时间$\tau$下的 Allan 方差值，并取双对数绘制成 Allan 方差曲线</p>
<p>下面是具体的计算步骤：</p>
<ol>
<li>首先计算取样时间为 $\tau_{\tiny0}$ 时的 Allan 方差：</li>
</ol>
<p>$$<br>\hat{\sigma}^{2} _ {A}(\tau_{\tiny0}) &#x3D; \dfrac{1}{2 (N-1)}\textstyle\sum_{k&#x3D;1}^{N-1}[\overline{\varOmega} _ {k+1}(\tau_{\tiny0}) - \overline{\varOmega} _ {k}(\tau_{\tiny0})]^2<br>$$</p>
<ol start="2">
<li><p>其次将取样时间间隔加倍，记 $\tau_{\tiny1} &#x3D; 2^1 \tau_{\tiny0}​$ 和 $N_{1} &#x3D; [N&#x2F;2]​$（$[\enspace \cdot \enspace]​$ 表示取整），在相继奇偶序号角速率之间作算术平均，即<br>$$<br>\overline{\varOmega} _ {k} (\tau_{\tiny1}) &#x3D; \dfrac{\overline {\varOmega} _ {2k-1} (\tau _ {\tiny0}) + \overline {\varOmega} _ {2k} (\tau _ {\tiny0})} {2}, \quad k &#x3D; 1,\enspace 2,\enspace 3,…,\enspace N _ {1}<br>$$<br>组成新的取样时间间隔为 $\tau{\tiny1}$ 的平均角速率序列，即<br>$$<br>\overline{\varOmega} _ {1} (\tau _ {\tiny1}), \enspace \overline{\varOmega} _ {2} (\tau _ {\tiny1}), \enspace \overline{\varOmega} _ {3} (\tau _ {\tiny1}), \enspace …, \enspace \overline{\varOmega} _ {N _ 1} (\tau _ {\tiny1})<br>$$<br>显然新序列长度减半（但可能相差 1 个数据，下同），计算取样时间为 $\tau _ {\tiny1}$ 时的 Allan 方差，即<br>$$<br>\sigma _ {A} ^ 2 (\tau _ {\tiny1}) &#x3D; \dfrac {1} {2(N _ 1-1)} \textstyle\sum _ {k&#x3D;1} ^ {N _ 1-1} [\overline{\varOmega} _ {k+1} (\tau _ {\tiny1}) - \overline{\varOmega} _ {k}(\tau _ {\tiny1})]^2<br>$$</p>
</li>
<li><p>再次将取样时间间隔加倍，记 $\tau _ {\tiny2} &#x3D; 2 \tau _ {\tiny1} &#x3D; 2 ^ 2 \tau _ {\tiny0}$ 和 $N _ {2} &#x3D; [N _ {1} &#x2F; 2]$，计算平均角速率，即<br>$$<br>\overline{\varOmega} _ {k} (\tau_{\tiny2}) &#x3D; \dfrac{\overline {\varOmega} _ {2k-1} (\tau _ {\tiny1}) + \overline {\varOmega} _ {2k} (\tau _ {\tiny1})} {2}, \quad k &#x3D; 1,\enspace 2,\enspace 3,…,\enspace N _ {2}<br>$$<br>组成新的取样时间间隔为 $\tau{\tiny2}$ 的平均角速率序列，即<br>$$<br>\overline{\varOmega} _ {1} (\tau_{\tiny2}), \enspace \overline{\varOmega} _ {2} (\tau _ {\tiny2}), \enspace \overline{\varOmega} _ {3} (\tau _ {\tiny2}), \enspace …, \enspace \overline{\varOmega} _ {N _ 2} (\tau _ {\tiny2})<br>$$<br>新序列的长度再次减半，计算取样时间为 $\tau _ {\tiny2}$ 时的 Allan 方差，即<br>$$<br>\sigma _ {A} ^ 2 (\tau _ {\tiny2}) &#x3D; \dfrac {1} {2(N _ 2-1)} \textstyle\sum _ {k&#x3D;1} ^ {N _ 2-1} [\overline{\varOmega} _ {k+1} (\tau _ {\tiny2}) - \overline{\varOmega} _ {k}(\tau _ {\tiny2})]^2<br>$$</p>
</li>
<li><p>如此反复将取样时间间隔不断加倍，记 $\tau _ {\tiny{L}} &#x3D; 2 \tau _ {\tiny{L-1}} &#x3D; 2^{L} \tau _ {\tiny{0}}$ 和 $N _ L &#x3D; [N _ {L-1}&#x2F;2]$，直至最终序列的长度不大于2，得平均角速率序列为<br>$$<br>\overline{\varOmega} _ {1} (\tau_{\tiny{L}}), \enspace, \enspace\overline{\varOmega} _ {N _ L} (\tau _ {\tiny{L}})<br>$$<br>并计算取样时间为 $\tau _ {\tiny{L}}$ 时得 Allan 方差，即<br>$$<br>\sigma _ {A} ^ 2 (\tau _ {\tiny{L}}) &#x3D; \dfrac {1} {2(N _ L-1)} \textstyle\sum _ {k&#x3D;1} ^ {N _ L-1} [\overline{\varOmega} _ {k+1} (\tau _ {\tiny{L}}) - \overline{\varOmega} _ {k}(\tau _ {\tiny{L}})]^2<br>$$<br>至此，获得一系列得点对 $\tau _ {\tiny{i}} \backsim \sigma _ {A} ^ 2 (\tau _ {\tiny{i}})$ 或 $\tau _ {\tiny{i}} \backsim \sigma _ {A} (\tau _ {\tiny{i}}), \enspace i&#x3D;1, \enspace 2, \enspace 3, \enspace … L$，完成 Allan 方差估计，并将结果绘制成双对数图。</p>
</li>
</ol>
<h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><ol>
<li><p>Allan Variance 与 Allan Deviation</p>
<p> 虽然我们称这种分析方法为 Allan 方差 $\tau_{\tiny{i}} \backsim \sigma _ {A} ^ 2 (\tau _ {\tiny{i}})$，但是在实际分析时一般取根号，得到的是 Allan Deviation $\tau _ {\tiny{i}} \backsim \sigma _ {A} (\tau_{\tiny{i}})​$</p>
</li>
<li><p>只能用于静态噪声分析</p>
<p> Allan 方差滤波器在零频率处截止，因此基座常值角速率干扰并不影响 Allan 方差的计算结果，但基座变角速率会引起额外的功率谱分量，如果不能消除会影响陀螺 Allan 方差性能参数分析的准确性。 </p>
</li>
<li><p>单位转换问题</p>
<p> 国际单位制，$\tau$ 和 $\sigma_{A}(\tau)$ 的单位分别取 $rad&#x2F;s$ 和 $s$，但实际分析过程中一般 $\sigma$ 常以 $^\circ&#x2F;h$ 为单位，并且各项噪声系数也常使用 $^\circ​$ 和 $h$ 的组合作为单位（除 Q 外），所以，求噪声系数的特征点也会随之改变，这里特征点的横坐标单位为 $s$。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>噪声类型</th>
<th align="center">误差系数</th>
<th align="center">习惯单位</th>
<th align="center">特征斜率</th>
<th align="center">特征点</th>
</tr>
</thead>
<tbody><tr>
<td>量化噪声(QN)</td>
<td align="center">Q</td>
<td align="center">“</td>
<td align="center">-1</td>
<td align="center">(1, $\sqrt{3}Q$)</td>
</tr>
<tr>
<td>角度随机游走(ARW)</td>
<td align="center">N</td>
<td align="center">$^\circ&#x2F;h^{\frac{1}{2}}$</td>
<td align="center">$-\frac{1}{2}$</td>
<td align="center">(100, 6N)</td>
</tr>
<tr>
<td>零偏不稳定性噪声(BI)</td>
<td align="center">B</td>
<td align="center">$^\circ&#x2F;h$</td>
<td align="center">0</td>
<td align="center">(1, $\frac{2B}{3}$)</td>
</tr>
<tr>
<td>角速率随机游走（RRW）</td>
<td align="center">K</td>
<td align="center">$^\circ&#x2F;h^{\frac{3}{2}}$</td>
<td align="center">$\frac{1}{2}$</td>
<td align="center">(100, $\frac{K}{6\sqrt{3}}$)</td>
</tr>
<tr>
<td>速率斜坡(RR)</td>
<td align="center">R</td>
<td align="center">$^\circ&#x2F;h^2$</td>
<td align="center">1</td>
<td align="center">(1000,  $\frac{R}{3.6\sqrt{2}}$)</td>
</tr>
</tbody></table>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>实例代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 传感器: MEMS陀螺仪</span></span><br><span class="line"><span class="comment">% 采样频率：1000 Hz</span></span><br><span class="line"><span class="comment">% 采样时间：2.5 h</span></span><br><span class="line">clear all; clc; close all;</span><br><span class="line">load(<span class="string">&#x27;G:\Code\Matlab\Allan\1000Hz-3h-01.mat&#x27;</span>);</span><br><span class="line">data = all_mixed.data&#123;<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">data = (data - <span class="number">2.5</span>) * <span class="number">1000</span> / <span class="number">20</span>;</span><br><span class="line">Y = data&#x27;; <span class="comment">% 转换为列向量</span></span><br><span class="line">dt =<span class="number">1</span>/<span class="number">1000</span>;  <span class="comment">%s 采样周期设定</span></span><br><span class="line">[AllanSigma, T] = AllanCompute(Y,dt);</span><br><span class="line"></span><br><span class="line">AllanSigma = AllanSigma*<span class="number">3600</span>; <span class="comment">% 转换 Allan 方差单位 to deg/h</span></span><br><span class="line">T = T/<span class="number">3600</span>; <span class="comment">% 转换时间单位 to h</span></span><br><span class="line">slopes = [<span class="number">-1</span>;<span class="number">-0.5</span>;<span class="number">0</span>;<span class="number">0.5</span>;<span class="number">1</span>];</span><br><span class="line">Ts = [<span class="built_in">sqrt</span>(<span class="number">3</span>);<span class="number">1</span>;NaN;<span class="number">3</span>;<span class="built_in">sqrt</span>(<span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span> = <span class="number">1</span>;</span><br><span class="line">method = <span class="number">2</span>; <span class="comment">% 使用最短路径匹配斜率</span></span><br><span class="line">[sigmasOut,figs,hs] = AllanAnalyze(AllanSigma,T,slopes,Ts,<span class="built_in">plot</span>,method);</span><br><span class="line">NoiseAnalyze(sigmasOut, figs, hs);</span><br></pre></td></tr></table></figure>
<p>求得的 Allan 方差曲线图和斜率图如下：</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201901/1548038290.6590927.png"></p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201901/1548038179.5409634.png"></p>
<p>下面是函数 <code>AllanCompute</code>, <code>AllanAnalyze</code>, <code>NoiseAnalyze</code> 的源码：</p>
<p><strong>AllanCompute.m</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[sigma, tau, Err]</span> = <span class="title">AllanCompute</span><span class="params">(y0, tau0)</span></span></span><br><span class="line"><span class="comment">% 计算Allan方差</span></span><br><span class="line"><span class="comment">% 输入：y -- 静态采集的数据(一行或列向量); tau0 -- 采样周期,单位：s</span></span><br><span class="line"><span class="comment">% 输出：sigma -- Allan Deviation(量纲单位与输入y保持一致), tau -- 取样时间, Err -- 百分比估计误差</span></span><br><span class="line"><span class="comment">% 作者: Yan Gong-min, 2012-08-22</span></span><br><span class="line"><span class="comment">% example: </span></span><br><span class="line"><span class="comment">%     y = randn(100000,1) + 0.00001*[1:100000]&#x27;;</span></span><br><span class="line"><span class="comment">%     [sigma, tau, Err] = avar(y, 0.1);</span></span><br><span class="line">    N = <span class="built_in">length</span>(y0);</span><br><span class="line">    y = y0; NL = N;</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">inf</span></span><br><span class="line">        sigma(k,<span class="number">1</span>) = <span class="built_in">sqrt</span>(<span class="number">1</span>/(<span class="number">2</span>*(NL<span class="number">-1</span>))*sum([y(<span class="number">2</span>:NL)-y(<span class="number">1</span>:NL<span class="number">-1</span>)].^<span class="number">2</span>));</span><br><span class="line">        tau(k,<span class="number">1</span>) = <span class="number">2</span>^(k<span class="number">-1</span>)*tau0;</span><br><span class="line">        Err(k,<span class="number">1</span>) = <span class="number">1</span>/<span class="built_in">sqrt</span>(<span class="number">2</span>*(NL<span class="number">-1</span>));</span><br><span class="line">        NL = <span class="built_in">floor</span>(NL/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> NL&lt;<span class="number">3</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        y = <span class="number">1</span>/<span class="number">2</span>*(y(<span class="number">1</span>:<span class="number">2</span>:<span class="number">2</span>*NL) + y(<span class="number">2</span>:<span class="number">2</span>:<span class="number">2</span>*NL));  <span class="comment">% 分组长度加倍(数据长度减半)</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>AllanAnalyze.m</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[sigmasOut,f,h]</span> = <span class="title">AllanAnalyze</span><span class="params">(AD,T,Slopes,Ts,plots,method)</span></span></span><br><span class="line"><span class="comment">%根据计算结果画出 Allan 方差曲线，求出噪声系数：</span></span><br><span class="line"><span class="comment">% OUPUT</span></span><br><span class="line"><span class="comment">% sigmasOut: 计算求得的每种噪声的系数</span></span><br><span class="line"><span class="comment">% f: 输出的图形句柄序列：f(1) 为 Allan 方差曲线，f(2) 为斜率曲线</span></span><br><span class="line"><span class="comment">% h: axis handles to plotted elements</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% INPUT：</span></span><br><span class="line"><span class="comment">% AD: 计算出的 Allan Deviation，单位: deg/h.</span></span><br><span class="line"><span class="comment">% T: 相关时间序列，单位 h.</span></span><br><span class="line"><span class="comment">% Slopes: 每种噪声的特征斜率</span></span><br><span class="line"><span class="comment">% Ts: 用于代入到斜率直线求噪声系数的横坐标序列</span></span><br><span class="line"><span class="comment">% plots: 是否画图</span></span><br><span class="line"><span class="comment">% method: 匹配斜率的方法，1为最先匹配法，2为最短路径匹配（优选2）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 确保每个斜率都有对应的 Ts</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">length</span>(Slopes)~=<span class="built_in">length</span>(Ts)</span><br><span class="line">    error(<span class="string">&#x27;Each slope must have a corresponding Ts. Enter NaN if no Ts&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 计算出 Allan 方差曲线的斜率序列</span></span><br><span class="line"><span class="comment">% slope is: (Log10(Y(t+1))-Log10(Y(t)))/((Log10(X(t+1))-Log10(X(t)))</span></span><br><span class="line">slope = logdiff(AD)./logdiff(T);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 画图</span></span><br><span class="line"><span class="keyword">if</span> plots</span><br><span class="line">    h = <span class="built_in">zeros</span>(<span class="number">2</span>,<span class="built_in">length</span>(Slopes)+<span class="number">1</span>);</span><br><span class="line">    f(<span class="number">1</span>) = <span class="built_in">figure</span>;</span><br><span class="line">    h(<span class="number">1</span>,<span class="number">1</span>) = loglog(T,AD,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>); <span class="built_in">hold</span> on;</span><br><span class="line">    title(<span class="string">&#x27;Allan Deviation&#x27;</span>)</span><br><span class="line">    xlabel(<span class="string">&#x27;Averaging Time&#x27;</span>);</span><br><span class="line">    ylabel(<span class="string">&#x27;Allan Deviation&#x27;</span>);</span><br><span class="line">    f(<span class="number">2</span>) = <span class="built_in">figure</span>;</span><br><span class="line">    h(<span class="number">2</span>,<span class="number">1</span>) = semilogx(T(<span class="number">2</span>:<span class="keyword">end</span>),slope); <span class="built_in">hold</span> on;</span><br><span class="line">    title(<span class="string">&#x27;Slope of Allan Deviation&#x27;</span>);</span><br><span class="line">    xlabel(<span class="string">&#x27;Averaging Time&#x27;</span>);</span><br><span class="line">    ylabel(<span class="string">&#x27;Log-Log Slope&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Color string for marking up each slope of interest in figures</span></span><br><span class="line">    c = &#123;<span class="string">&#x27;r&#x27;</span>;<span class="string">&#x27;b&#x27;</span>;<span class="string">&#x27;k&#x27;</span>;<span class="string">&#x27;g&#x27;</span>;<span class="string">&#x27;y&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    h = <span class="number">0</span>;</span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Creaate output vector shell</span></span><br><span class="line">sigmasOut = <span class="built_in">zeros</span>(<span class="built_in">length</span>(Slopes),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Now, step through each slope of interest, find the slope in the Allan</span></span><br><span class="line"><span class="comment">% deviation signal, extrapolate to corresponding Ts of interest and record</span></span><br><span class="line"><span class="comment">% the coefficient found at that location.</span></span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">length</span>(Slopes)</span><br><span class="line">        curr_slope = Slopes(ii);</span><br><span class="line">        curr_t = Ts(ii);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Method 1: Use knowledge of Allan deviation shape, starting from</span></span><br><span class="line">        <span class="comment">% the left (small T), look for first occurence of desired slope.</span></span><br><span class="line">        <span class="comment">% Method 2: Use min distance method to locate point with closest</span></span><br><span class="line">        <span class="comment">% matching slope to the one desired.</span></span><br><span class="line">        <span class="keyword">if</span> method==<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sign</span>(slope(<span class="number">1</span>)) == <span class="number">-1</span> <span class="comment">% 判断斜率如果为负</span></span><br><span class="line">                idx = <span class="built_in">find</span>(slope&gt;curr_slope,<span class="number">1</span>,<span class="string">&#x27;first&#x27;</span>); <span class="comment">% 第一个斜率大于 slope 的位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                idx = <span class="built_in">find</span>(slope&lt;curr_slope,<span class="number">1</span>,<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> method==<span class="number">2</span> <span class="comment">% 方法2，最短路径匹配，找到与特征斜率最接近的斜率在曲线种所处的位置</span></span><br><span class="line">            dist = (slope-curr_slope).^<span class="number">2</span>;</span><br><span class="line">           [~,idx] = <span class="built_in">min</span>(dist);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% 根据曲线特征斜率点创建直线函数，代入 Ts，求解噪声系数</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(idx)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isnan</span>(curr_t)</span><br><span class="line">                sigmasOut(ii) = AD(idx);</span><br><span class="line">                linefun = @(t) AD(idx) + <span class="number">0</span>*t;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linefun = @(t) <span class="number">10.</span>^(curr_slope*(<span class="built_in">log10</span>(t)-<span class="built_in">log10</span>(T(idx)))...</span><br><span class="line">                    +<span class="built_in">log10</span>(AD(idx)));</span><br><span class="line">                sigmasOut(ii) = linefun(curr_t);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> plots</span><br><span class="line">                <span class="built_in">figure</span>(f(<span class="number">1</span>)); h(<span class="number">1</span>,ii+<span class="number">1</span>) = <span class="built_in">plot</span>(T(idx),AD(idx)...</span><br><span class="line">                    ,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,c&#123;ii&#125;,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,c&#123;ii&#125;);...</span><br><span class="line">                    <span class="built_in">plot</span>(T,linefun(T),<span class="string">&#x27;--&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,c&#123;ii&#125;);</span><br><span class="line">                <span class="built_in">figure</span>(f(<span class="number">2</span>)); h(<span class="number">2</span>,ii+<span class="number">1</span>) = <span class="built_in">plot</span>(T(idx+<span class="number">1</span>),...</span><br><span class="line">                    slope(idx),<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,c&#123;ii&#125;,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,c&#123;ii&#125;);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 用于双对数曲线求斜率</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logdiff</span> = <span class="title">logdiff</span><span class="params">(X)</span></span></span><br><span class="line">N = <span class="built_in">size</span>(X,<span class="number">1</span>);</span><br><span class="line">logdiff = <span class="built_in">zeros</span>(N<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:N<span class="number">-1</span></span><br><span class="line">    logdiff(ii) = <span class="built_in">log10</span>(X(ii+<span class="number">1</span>))-<span class="built_in">log10</span>(X(ii));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>NoiseAnalyze.m</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[]</span> = <span class="title">NoiseAnalyze</span><span class="params">(sigmasOut, figs, hs)</span></span></span><br><span class="line"><span class="comment">% 在图中标出噪声并打印到命令行窗口</span></span><br><span class="line">sigmasOut(<span class="number">3</span>) = sigmasOut(<span class="number">3</span>)/<span class="built_in">sqrt</span>((<span class="number">2</span>*<span class="built_in">log</span>(<span class="number">2</span>)/<span class="built_in">pi</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">&#x27; Quantization:%0.2e [deg]\n&#x27;</span>, sigmasOut(<span class="number">1</span>));</span><br><span class="line">fprintf(<span class="string">&#x27;Random Walk:%0.2e [deg/sqrt&#123;hr&#125;]\n&#x27;</span>,sigmasOut(<span class="number">2</span>));</span><br><span class="line">fprintf(<span class="string">&#x27;Bias Instability:%0.2e [deg/hr]\n&#x27;</span>,sigmasOut(<span class="number">3</span>));</span><br><span class="line">fprintf( <span class="string">&#x27;Rate Random Walk:%0.2e [deg/hr/sqrt&#123;hr&#125;]\n&#x27;</span>, sigmasOut(<span class="number">4</span>));</span><br><span class="line">fprintf( <span class="string">&#x27;Rate Ramp:%0.2e [deg/hr/hr]\n&#x27;</span>, sigmasOut(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">% sigmasOut(1) % Quantization  deg (gyros) OR m/s (accels)</span></span><br><span class="line"><span class="comment">% sigmasOut(2) %  Random Walk  deg/sqrt(hr) (gyros) OR m/s/sqrt(hr) (accels)</span></span><br><span class="line"><span class="comment">% sigmasOut(3)%  Bias Instability  deg/hr (gyros) OR m/s/hr (accels)</span></span><br><span class="line"><span class="comment">% sigmasOut(4)% Rate Random Walk deg/hr/sqrt(hr) (gyros) OR m/s/hr/sqrt(hr)(accels)</span></span><br><span class="line"><span class="comment">% sigmasOut(5) % Rate Ramp deg/hr/hr</span></span><br><span class="line">sigmaQ = sprintf(<span class="string">&#x27;Quantization:%0.2e [deg]&#x27;</span>,...</span><br><span class="line">    sigmasOut(<span class="number">1</span>));</span><br><span class="line">sigmaRW = sprintf(<span class="string">&#x27;Random Walk:%0.2e [deg/sqrt(hr)]&#x27;</span>,...</span><br><span class="line">    sigmasOut(<span class="number">2</span>));</span><br><span class="line">sigmaBias = sprintf(<span class="string">&#x27;Bias Instability:%0.2e [deg/hr]&#x27;</span>,...</span><br><span class="line">    sigmasOut(<span class="number">3</span>));</span><br><span class="line">sigmaRRW = sprintf(...</span><br><span class="line">    <span class="string">&#x27;Rate Random Walk:%0.2e [deg/hr/sqrt(hr)]&#x27;</span>,...</span><br><span class="line">    sigmasOut(<span class="number">4</span>));</span><br><span class="line">sigmaRR = sprintf(...</span><br><span class="line">    <span class="string">&#x27;Rate Ramp:%0.2e [deg/hr/hr]&#x27;</span>,...</span><br><span class="line">    sigmasOut(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">figure</span>(figs(<span class="number">1</span>)); <span class="built_in">hold</span> on; title(<span class="string">&#x27;Allan Deviation&#x27;</span>);</span><br><span class="line">set(gcf,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span> <span class="number">0</span> <span class="number">800</span> <span class="number">800</span>]);</span><br><span class="line"><span class="built_in">legend</span>(hs(<span class="number">1</span>,<span class="number">2</span>:<span class="keyword">end</span>),sigmaQ,sigmaRW,sigmaBias,sigmaRRW,sigmaRR,<span class="string">&#x27;Location&#x27;</span>,...</span><br><span class="line">    <span class="string">&#x27;NorthEast&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Averaging Time, $\tau$ (hr)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Allan Deviation, $\sigma(\tau)$ (deg/hr)&#x27;</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(figs(<span class="number">2</span>)); <span class="built_in">hold</span> on; title(<span class="string">&#x27;Allan Deviation Slope&#x27;</span>);</span><br><span class="line">set(gcf,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0</span> <span class="number">0</span> <span class="number">800</span> <span class="number">800</span>]);</span><br><span class="line"><span class="built_in">legend</span>(hs(<span class="number">2</span>,<span class="number">2</span>:<span class="keyword">end</span>),<span class="string">&#x27;-1: Quantization&#x27;</span>,<span class="string">&#x27;-1/2: Random Walk&#x27;</span>,...</span><br><span class="line">    <span class="string">&#x27;0: Bias Instability&#x27;</span>,<span class="string">&#x27;+1/2: Rate Random Walk&#x27;</span>,...</span><br><span class="line">    <span class="string">&#x27;+1: Rate Ramp&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;NorthEast&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Averaging Time, $\tau$ (hr)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Allan Deviation Slope&#x27;</span>);</span><br><span class="line">grid minor;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]: 惯性仪器测试与数据分析, 135-158</p>
]]></content>
      <categories>
        <category>信号处理</category>
      </categories>
  </entry>
  <entry>
    <title>摆脱被动状态</title>
    <url>/%E6%9D%82%E8%AE%B0/%E6%91%86%E8%84%B1%E8%A2%AB%E5%8A%A8%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>处于一种尴尬的位置很久,感觉要是不能尽快摆脱这种状态,灭亡便不远了.</p>
<span id="more"></span>

<p>是这样的，我本科学的是机械，研究生读传感器，由于研一接触了一阵这个专业，发现不太感冒，再加上空闲时间多，慢慢地就对变成编程产生了兴趣，之后便一发不可收拾．半年前决定以后要走编程这条路，然后就每天花全部时间在编程上面．</p>
<p>但是到了研二,课题任务变重，师兄要求又很严格，周一周五都要开组会，留给我学编程的时间很少很少．再加上我个人时间管理能力极差，完全无法平衡好科研和编程之间的时间分配．所以就造成了有的周编程学的多，有的周科研做的多．有的周两者什么都没学到．这几个月来皆是如此，进展十分缓慢．</p>
<p>这令我十分痛苦，而且心情一直处于压抑的状态，对科研更是有了一种抗拒心理．</p>
<p>但是呢，科研我不能不做，原因有以下三点：</p>
<ul>
<li><p>我要毕业，拿不出一篇小论文和大论文，谈何毕业．</p>
</li>
<li><p>师兄人很好，专业能力强而且负责，对待学习的态度极其认真，我尊敬他，并且不想再欺骗他，不能什么都没做的情况下谎报科研进展．</p>
</li>
<li><p>我现在做的是传感器融合算法，对我来说难度较大，但与编程也有交叉知识，做好了一样对我有帮助．而且面对一个新领域的问题的解决之道，是我目前最欠缺的东西之一，我不想放弃．</p>
</li>
</ul>
<p>至于编程呢，那就直接与工作相关了．明天春天要找实习，参加面试，秋招要找工作，以我目前的水平怕是很难找到好的岗位．</p>
<p>还有一年，时间宝贵．</p>
<p>所以，这样说来，目前最大的问题是时间管理．</p>
<p>我想了一种方法，感觉可行：</p>
<p>白天的时间留给科研任务，晚饭后的几个小时留给编程．</p>
<p>白天上午两个小时，下午三个小时．晚上的话大概四个小时，高效利用的话应该是足够了．</p>
<p>既然计划定下了就要好好执行，白天即使再不想学也不能打破计划去写代码，这是之前最大的问题．</p>
<p>时间管理上，今天选一本书好好读一下，不然以后到工作上不能还是这种状态，一样要灭亡的．</p>
<p>干就完了！</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>我会永远怀念你</title>
    <url>/%E6%9D%82%E6%96%87/%E6%88%91%E4%BC%9A%E6%B0%B8%E8%BF%9C%E6%80%80%E5%BF%B5%E4%BD%A0/</url>
    <content><![CDATA[<p>我与她相处时日不多，但她就是我想象中外婆的样子，慈祥、和蔼、爱笑、做饭特别好吃。希望她在天堂静好，希望天堂也有辣椒，希望她能听到，有人在一个叫做互联网的地方以这样一种特殊的方式，轻轻地悼念过她。</p>
<span id="more"></span>

<p>她住的地方叫玉山镇，贵州黔南州瓮安县，是真的四面环山，从外面达到瓮安县要穿过崇山峻岭，从瓮安县到玉山还要走一段很长的崎岖险陡的山路。</p>
<p>不说与世隔绝，起码也算是个桃花源处，她生前在此生活，死后在这里长眠，挺好的。</p>
<p>我们离的实在是太远了，再加上各种各样的原因，所以，存于我记忆中的，我们相处的次数也不超过一手之数。在她生前，我只去贵州看过她两次。</p>
<p>一次是我高中毕业，没有学业牵绊，再加上我已成年，我只是觉得我该该去看看了。</p>
<p>第二次是我大学毕业，年初她生病，身体很不好，我六月份就直接从南昌提着行李去贵州了。</p>
<p>以及，这一次，我去给她送行，没能见到她最后一眼。</p>
<hr>
<p>我努力搜刮脑海中所有有关她的记忆，一一写下来，怕有天会忘记，</p>
<p><strong>她有我想象中所有外婆应该有的样子，慈祥、和蔼、爱笑、做饭特别好吃。</strong></p>
<p>记忆里第一次见她（之前我都不记得了）是我初中的时候，也有可能是小学，嗯，应该是小学。我中午放学，看到我家门口站着一个老人，慈眉善目，笑着看我一路跑进巷子。我以为是我哪个邻居家的来找我奶奶的，但以前从来没见过。我跑到门口，喊她奶奶，她没答应，但嘴角笑得更上扬了，其实那时候她就耳聋了，除非用家乡话特别大声地喊出来她才听得到。</p>
<p>后来我们一起进到屋里，我妈说这是你外婆，叫外婆，我记得我当时还很惊喜，叫了之后记不清外婆是掏出二十块还是五十块钱给我来着，我习惯性地望向我妈，她直接笑着说，拿着吧，那是我印象中第一次有长辈给我钱而家里没拦的。</p>
<p>她吃不惯海鲜，连虾她吃了也会闹肚子。</p>
<p>她常戴个草帽，出远门会背个草篓，从贵州来北京，她一路背着黄巴、腊肉、腊肠、各种辣椒各种吃的，少说得有三四十斤。</p>
<p>高中毕业那年暑假，我还没去南昌上学，扛辣指数基本为零。我到贵州，每样菜她都会做两份，一份辣的，她们吃，一份不辣的给我。最好吃的是她炒的土豆，晶莹透亮，口感绵软。</p>
<p>毕业那年暑假，我从学校去贵州，从老家玉山接她去瓮安县城里住，她拿了好多腊肉让我提着。我记得，腊肉很好吃，盐菜是绝配。</p>
<p>我带她去超市买东西，她看到瓜子零食什么的总要拿两个尝尝，我要买她又不要。付款的时候我不是刷卡嘛，回到家她跟我表姐说好奇怪，我买东西竟然不用花钱。</p>
<p>早上我要做蛋炒饭，她说她不吃，非要吃她从老家带过来的挂面，煮熟了，放点辣椒、味精、香油、盐一拌，吃的特别香。</p>
<p>我给她做过可乐鸡翅，那时候我只会这一道菜，贵州人很少吃甜的，她没表现得特喜欢，也没说不喜欢，就吃了两三个，再给她夹，她就摸摸自己的肚子，那表示再吃会肚子痛，我知道的。</p>
<p>我问我妈，二姨待他最好，家里环境好，也有电梯，她为啥不爱在二姨家待着。我妈说，她最喜欢去的是大姨家，那里有小孩，可是大姨家在六楼，没电梯，她上去一次好几天都不能下来。是的，我陪她在大姨家住的那几天，她经常站在阳台上手托腮帮子从窗户往外面望，我问她看啥呢，她似乎没听到，她说的啥我也没听懂，然后我手托腮帮子跟她一起望。</p>
<p>其实她更喜欢自己住，租个屋子，自己做饭、自己睡觉，白天就到街上跟其他人唠嗑，毕业那年年初她生病，跑到自己的小屋不吃不喝两三天，想一死算了。</p>
<p>不知是她喜欢吃，还是她以为我喜欢吃，那个夏天她总是买荔枝。</p>
<p>她眼睛小，笑起来更小，我曾经一度觉得她长的很像普京。</p>
<p><img src="https://simon-blog-1256238262.cosbj.myqcloud.com/Blog/201903/1552734339.918977.png"></p>
<p>我觉得这张照片拍得好极了，是我拍过的照片里最满意的一张，这就是她在我心里的样子。</p>
<p><strong>我们相处时日不多，但她就是我想象中外婆的样子，慈祥、和蔼、爱笑、做饭特别好吃。</strong></p>
<p>希望她在天堂静好，</p>
<p>希望天堂也有辣椒，</p>
<p>希望她能听到，</p>
<p>有人在一个叫做互联网的地方以这样一种特殊的方式，轻轻地悼念过她。</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
  </entry>
  <entry>
    <title>与你相恋的100件小事</title>
    <url>/uncategorized/%E4%B8%8E%E4%BD%A0%E7%9B%B8%E6%81%8B%E7%9A%84100%E4%BB%B6%E5%B0%8F%E4%BA%8B/</url>
    <content><![CDATA[<p>先占个坑</p>
]]></content>
  </entry>
</search>
